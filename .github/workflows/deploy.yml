name: Deploy to Cloudways

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      run: |
        # Install sshpass for non-interactive password authentication
        sudo apt-get update
        sudo apt-get install -y sshpass
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.CLOUDWAYS_SSH_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to Cloudways
      run: |
        sshpass -p "${{ secrets.CLOUDWAYS_SSH_PASS }}" ssh -o StrictHostKeyChecking=no ${{ secrets.CLOUDWAYS_SSH_USER }}@${{ secrets.CLOUDWAYS_SSH_HOST }} << 'EOF'
          set -e
          echo "=== DEPLOYMENT STARTED ==="
          echo "Timestamp: $(date)"
          echo "Current user: $(whoami)"
          echo "Current directory: $(pwd)"
          echo "Available space: $(df -h . | tail -1)"
          
          # Navigate to app directory
          # Find the correct application directory
          APP_DIR=$(ls -d ~/applications/*/ | head -1)
          if [ -z "$APP_DIR" ]; then
            echo "No application directory found in ~/applications/"
            exit 1
          fi
          cd "$APP_DIR"
          echo "App directory: $(pwd)"
          
          # Check permissions and try to fix if possible
          echo "Checking permissions..."
          ls -la
          
          # Create backup of current deployment
          if [ -d "public_html" ] && [ "$(ls -A public_html)" ]; then
            echo "Creating backup..."
            # Create backup in home directory where we have write permissions
            mkdir -p ~/deployment_backups
            cp -r public_html ~/deployment_backups/backup_$(date +%Y%m%d_%H%M%S)
            echo "Backup created in ~/deployment_backups/"
          fi
          
          # Clone or update repository in home directory
          if [ ! -d "~/website_code" ]; then
            echo "Cloning repository..."
            git clone https://github.com/sosilans/DashasRestourant1OWN.git ~/website_code
          else
            echo "Updating repository..."
            cd ~/website_code
            git fetch origin
            git reset --hard origin/main || git reset --hard origin/master
            cd "$APP_DIR"
          fi
          
          # Deploy NEW_FRONTEND if exists
          if [ -d "~/website_code/NEW_FRONTEND" ]; then
            echo "Deploying NEW_FRONTEND..."
            
            # Clear public_html
            rm -rf public_html/*
            
            # Copy files (excluding README and scripts)
            find ~/website_code/NEW_FRONTEND -type f ! -name "README.md" ! -name "*.ps1" ! -name "*.md" -exec cp {} public_html/ \;
            
            # Copy directories
            for dir in ~/website_code/NEW_FRONTEND/*/; do
              if [ -d "$dir" ]; then
                dirname=$(basename "$dir")
                cp -r "$dir" public_html/
              fi
            done
            
            # Set proper permissions
            chmod -R 755 public_html/
            find public_html/ -type f -exec chmod 644 {} \;
            
            echo "=== DEPLOYMENT COMPLETED ==="
            echo "Files deployed:"
            ls -la public_html/
            
          else
            echo "No NEW_FRONTEND directory found in ~/website_code/"
            echo "Repository contents:"
            ls -la ~/website_code/ 2>/dev/null || echo "Repository not found"
            exit 1
          fi
        EOF

    - name: Health Check
      run: |
        echo "Waiting for deployment to stabilize..."
        sleep 10
        
        # Test site availability
        for i in {1..5}; do
          if curl -f -s --max-time 10 https://phpstack-1511050-5820602.cloudwaysapps.com/ > /dev/null; then
            echo "‚úÖ Site is responding"
            break
          else
            echo "‚è≥ Attempt $i/5: Site not responding yet..."
            sleep 10
          fi
        done
        
        # Final verification
        if curl -f -s --max-time 10 https://phpstack-1511050-5820602.cloudwaysapps.com/ > /dev/null; then
          echo "üéâ Deployment successful!"
        else
          echo "‚ùå Deployment failed - site not responding"
          exit 1
        fi

    - name: Rollback on Failure
      if: failure()
      run: |
        echo "Deployment failed, attempting rollback..."
        sshpass -p "${{ secrets.CLOUDWAYS_SSH_PASS }}" ssh -o StrictHostKeyChecking=no ${{ secrets.CLOUDWAYS_SSH_USER }}@${{ secrets.CLOUDWAYS_SSH_HOST }} << 'EOF'
          # Find the correct application directory
          APP_DIR=$(ls -d ~/applications/*/ | head -1)
          cd "$APP_DIR"
          
          # Find latest backup
          LATEST_BACKUP=$(ls -t ~/deployment_backups/ | head -1)
          if [ -n "$LATEST_BACKUP" ]; then
            echo "Rolling back to: $LATEST_BACKUP"
            rm -rf public_html/*
            cp -r "~/deployment_backups/$LATEST_BACKUP"/* public_html/
            chmod -R 755 public_html/
            find public_html/ -type f -exec chmod 644 {} \;
            echo "Rollback completed"
          else
            echo "No backup found for rollback"
          fi
        EOF
